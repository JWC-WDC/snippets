<?php
// Load external functions:
require 'functions.php';

// Remember: When validating forms, we want to *validate in the browser first* using JavaScript. 

// After JS validates it, *then* it's sent to the server, which validates it again using code like we see below.

// Why do it 2x? Security.

// ---------

// First step here is to create variables which we will populate with content shortly.

// Right now we are creating several variables at once and setting their initial values to nothing (empty):

// Initialize variables:

$name = $email = $date = ""; // user content
$nameErr = $emailErr = $dateErr = ""; // error messages
$success = false; // validation status

// Check if the form was submitted:

// Note: $_SERVER["REQUEST_METHOD"] == "POST" tells the server that the form was submitted using the POST method (you can see 'post' in the HTML)

if ($_SERVER["REQUEST_METHOD"] == "POST") {

    // If the Submit button was clicked:

    if (isset($_POST["submit"])) {

        // "isset" is used to check if a variable is set and if so, is *not* null (it has content). It returns true if the variable exists and is not null; otherwise, it returns false 

        // Remember: we cannot even click the button successfully until the fields are filled correctly, per our validation

        // Here we set $success to true only once the button is clicked successfully:

        $success = true;

        // --- Name Validation - is there a value to begin with or is it empty?

        if (empty($_POST["name"])) {
            $nameErr = "Name is required";
            $success = false;
        } else {
            // Note: trim removes whitespace from the beginning and end

            // htmlspecialchars converts special characters to HTML entities (for security)

            // more about htmlspecialchars: https://chatgpt.com/share/67fd4dd4-8520-800e-87e4-c2abd62d63e1

            $name = htmlspecialchars(trim($_POST["name"]));

            // next, preg_match checks if the name contains only letters and spaces. More about preg_match (which is really scary-looking at 1st glance):

            // https://chatgpt.com/share/67fd4c3d-c388-800e-9f8f-e9365c89c1f8

            if (!preg_match("/^[a-zA-Z ]*$/", $name)) {
                $nameErr = "Only letters and spaces allowed";
                $success = false;
            }
        }

        // --- Email Validation - is there a value to begin with or is it empty?

        if (empty($_POST["email"])) {
            $emailErr = "Email is required";
            $success = false;
        } else {
            // trim removes whitespace, then filter_var sanitizes the email input
            $email = filter_var(trim($_POST["email"]), FILTER_SANITIZE_EMAIL);

            // filter_var also validates the email format

            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $emailErr = "Invalid email format";
                $success = false;
            }
        }

        // --- Date Validation - is there a value to begin with or is it empty?

        if (empty($_POST["date"])) {
            $dateErr = "Date is required";
            $success = false;
        } else {
            $date = $_POST["date"];

            // Note: strtotime converts the date string into a timestamp to compare it.

            // Note here how the code checks to make sure the date is not in the past by comparing today's date with the date entered in the form:

            if (strtotime($date) < strtotime(date("Y-m-d"))) {
                $dateErr = "Date cannot be in the past";
                $success = false;
            }
        }
    }

    // If the Modify Info button was clicked (only possible after successful submission):

    if (isset($_POST["modify"])) {

        // Reset all variables, ie, start from scratch:

        $name = $email = $date = "";
        $nameErr = $emailErr = $dateErr = "";
        $success = false;
    }
}
?>

<style>
    /* hard-coded CSS for demo purposes only */

    * {
        padding: .15rem;
    }

    .error {
        color: red;
    }

    input {
        margin-bottom: 2rem;
    }

    ul {
        list-style: none;
    }
</style>

<h2>Appointment Form</h2>

<form method="post">

    <ul>
        <!-- Note how when the page 1st loads there is only a red asterisk but once a field is entered incorrectly there is a longer error message. -->

        <!-- Check it out in the HTML to confirm. The longer message is not there. So from where is it coming? It is the same answer for all 3 values below. See if you understand its origin in the code. -->

        <li>Name: <input type="text" name="name" value="<?php echo $name; ?>">
            <span class="error">* <?php echo $nameErr; ?></span>
        </li>

        <li> Email: <input type="text" name="email" value="<?php echo $email; ?>">
            <span class="error">* <?php echo $emailErr; ?></span>
        </li>

        <li> Appointment Date: <input type="date" name="date" value="<?php echo $date; ?>">
            <span class="error">* <?php echo $dateErr; ?></span>
        </li>
    </ul>

    <?php
    // Note how PHP and HTML are coded together here, dropping in and out of each language. This is a common practice.

    // The code says, If it is NOT a successful form submission leave the button as-is
    // but if it IS successful, change it so a user can modify the info

    if (!$success): ?>
        <input type="submit" name="submit" value="Submit">
    <?php else: ?>
        <input type="submit" name="modify" value="Modify Info">
    <?php endif; ?>
</form>

<?php
// more about the concatenation seen below:
// https://chatgpt.com/share/67fd5151-b0b0-800e-bcb5-b582c68cddc4

if ($success) {
    echo '<h3>Appointment Confirmed!</h3>';
    echo '<p><strong>Name: </strong>';
    echo $name . '</p>';
    echo '<p><strong>Email: </strong>';
    echo $email . '</p>';
    echo '<p><strong>Appointment Date: </strong>';
    echo $date . '</p>';
} ?>
